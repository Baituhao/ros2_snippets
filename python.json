{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "ROS2 Python Node Template": {
    "prefix": "ros2nodepy",
    "body": [
      "import rclpy",
      "from rclpy.node import Node",
      "",
      "class ${1:MyNode}(Node):",
      "    def __init__(self):",
      "        super().__init__('${2:my_node}')",
      "        ${3:# TODO: Add publisher/subscription/timer here}",
      "",
      "",
      "def main():",
      "    rclpy.init()",
      "    node = ${1:MyNode}()",
      "    rclpy.spin(node)",
      "    node.destroy_node()",
      "    rclpy.shutdown()",
      "",
      "if __name__ == \"__main__\":",
      "    main()"
    ],
    "description": "ROS2 Python basic node with lifecycle and cleanup"
  },
  "ros2_launch_py": {
	"prefix": "ros2_launch_py",
	"body": [
		"from launch import LaunchDescription",
		"from launch_ros.actions import Node",
		"# 封装终端指令相关类-----------",
		"# from launch.actions import ExecuteProcess",
		"# from launch.substitutions import FindExecutable",
		"# 参数声明与获取--------------",
		"from launch.actions import DeclareLaunchArgument",
		"# from launch.substitutions import LaunchConfiguration",
		"# 文件包含相关----------------",
		"# from launch.actions import IncludeLaunchDescription",
		"# from launch.launch_description_sources import PythonLaunchDescriptionSource",
		"# 分组相关--------------------",
		"# from launch_ros.actions import PushRosNamespace",
		"# from launch.actions import GroupAction",
		"# 事件相关--------------------",
		"# from launch.event_handlers import OnProcessStart, OnProcessExit",
		"# from launch.actions import ExecuteProcess, RegisterEventHandler, LogInfo",
		"# 获取功能包下share目录路径-----",
		"#from ament_index_python.packages import get_package_share_directory",
		"#from launch_ros.parameter_descriptions import ParameterValue",
		"#from launch.substitutions import Command, LaunchConfiguration",
		"#import os",
		"#from launch.conditions import IfCondition",
		"",
		"def generate_launch_description():",
		"",
		"    return LaunchDescription([",
		"        ",
		"    ])"
	],
	"description": ""
	}

}